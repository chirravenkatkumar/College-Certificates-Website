<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload PDF, Image, or CSV and Select Positions</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.css"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="/uploadpage.css">
    <style>
        /* CSS for modal popup */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            position: relative;
        }
        /* Close button style */
        .close {
            color: #aaa;
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 30px;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        /* CSS for canvas */
        #pdfViewer canvas {
            display: block;
            margin: 0 auto;
            max-width: 100%;
            max-height: 100%;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <h1>Upload PDF, Image, or CSV and Select Positions</h1>
        <form id="positionSelectionForm" action="/admin_Dashboard/uploadCertificates" method="post" enctype="multipart/form-data">
            <input type="file" id="fileInput" name="pdfFileInput" accept=".pdf,.png,.jpeg,.csv" required>
            <button type="button" id="uploadFileButton">Upload File</button>

            <input type="file" id="csvFileInput" name="csvFileInput" accept=".csv, .xlsx" required>            
            <button type="button" id="uploadCsvButton">Upload CSV File</button>

            <button type="button" id="selectPositionName" name="selectPositionName" style="display: none;">Select Name Position</button>
            <button type="button" id="selectPositionEvent" name="selectPositionEvent" style="display: none;">Select Event Position</button>
            <button type="button" id="selectPositionDate" name="selectPositionDate" style="display: none;">Select Date Position</button>

            <button type="button" id="finishSelection" name="finishSelection" style="display: none;">Finish Selection</button>
            <button type="button" id="cancelSelection" name="cancelSelection" style="display: none;">Cancel Selection</button>


            <!-- Hidden input fields for coordinates -->
            <input type="hidden" id="namePositionXInput" name="namePositionX">
            <input type="hidden" id="namePositionYInput" name="namePositionY">
            <input type="hidden" id="eventPositionXInput" name="eventPositionX">
            <input type="hidden" id="eventPositionYInput" name="eventPositionY">
            <input type="hidden" id="datePositionXInput" name="datePositionX">
            <input type="hidden" id="datePositionYInput" name="datePositionY">

            <button type="button" id="previewCoordinatesButton">Preview Coordinates</button>
            <button type="submit" id="submitButton" name="submitButton">Submit</button>
        </form>

        <div id="selectedCoordinatesPreview" style="display: none;">
            <h2>Selected Coordinates:</h2>
            <ul id="coordinatesList"></ul>
            <div id="pdfPreviewContainer" style="display: none;"></div>
            <button type="button" id="closePreviewButton" style="display: none;">Close Preview</button>
        </div>
    </div>

    <div id="pdfModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closePdfModal()">&times;</span>
            <div id="pdfViewer"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var fileInput = document.getElementById('fileInput');
            var uploadFileButton = document.getElementById('uploadFileButton');
            var selectPositionName = document.getElementById('selectPositionName');
            var selectPositionEvent = document.getElementById('selectPositionEvent');
            var selectPositionDate = document.getElementById('selectPositionDate');
            var cancelSelection = document.getElementById('cancelSelection');
            var namePositionXInput = document.getElementById('namePositionXInput');
            var namePositionYInput = document.getElementById('namePositionYInput');
            var eventPositionXInput = document.getElementById('eventPositionXInput');
            var eventPositionYInput = document.getElementById('eventPositionYInput');
            var datePositionXInput = document.getElementById('datePositionXInput');
            var datePositionYInput = document.getElementById('datePositionYInput');
            var pdfFile = null;
            var canvas = null;
            var nameX = null;
            var nameY = null;
            var eventX = null;
            var eventY = null;
            var dateX = null;
            var dateY = null;
            var currentPosition = null;

            uploadFileButton.addEventListener('click', function() {
                fileInput.click();
            });

            fileInput.addEventListener('change', function(event) {
                pdfFile = event.target.files[0];
                if (pdfFile) {
                    if (pdfFile.type === 'application/pdf' || pdfFile.type === 'image/png' || pdfFile.type === 'image/jpeg') {
                        selectPositionName.style.display = 'block';
                        selectPositionEvent.style.display = 'block';
                        selectPositionDate.style.display = 'block';
                    }
                }
            });

            function openPdfModal() {
                var modal = document.getElementById('pdfModal');
                modal.style.display = 'block';
            }

            function closePdfModal() {
                var modal = document.getElementById('pdfModal');
                modal.style.display = 'none';
            }

            async function extractTextAndPositions(pdf) {
                const textContent = await pdf.getPage(1).then(page => page.getTextContent());
                return textContent.items.map(item => ({
                    text: item.str,
                    x: item.transform[4], // x-coordinate of the text element
                    y: item.transform[5], // y-coordinate of the text element
                }));
            }

            async function renderPdf() {
                if (canvas) {
                    document.getElementById('pdfViewer').removeChild(canvas);
                    cancelSelection.style.display = 'none';
                }

                var fileReader = new FileReader();
                fileReader.onload = async function() {
                    var typedarray = new Uint8Array(this.result);
                    const pdf = await pdfjsLib.getDocument(typedarray).promise;
                    const textAndPositions = await extractTextAndPositions(pdf);

                    // Here you would need to analyze textAndPositions to identify relevant positions (Name, Event, Date)
                    // and extract their coordinates to set the corresponding input fields (namePositionXInput, etc.)

                    // For demonstration purposes, let's assume we're setting the first text element's coordinates as an example
                    if (textAndPositions.length > 0) {
                        nameX = textAndPositions[0].x;
                        nameY = textAndPositions[0].y;
                        namePositionXInput.value = nameX;
                        namePositionYInput.value = nameY;
                    }

                    // You would need to do similar steps for other text elements (Event, Date)

                    openPdfModal();
                };
                fileReader.readAsArrayBuffer(pdfFile);
            }

            function calculateScale(width, height) {
                var modalWidth = window.innerWidth * 0.9;
                var modalHeight = window.innerHeight * 0.9;
                var scaleX = modalWidth / width;
                var scaleY = modalHeight / height;
                return Math.min(scaleX, scaleY);
            }

            selectPositionName.addEventListener('click', function() {
                currentPosition = 'Name';
                renderPdf();
                cancelSelection.style.display = 'block';
            });

            selectPositionEvent.addEventListener('click', function() {
                currentPosition = 'Event';
                renderPdf();
                cancelSelection.style.display = 'block';
            });

            selectPositionDate.addEventListener('click', function() {
                currentPosition = 'Date';
                renderPdf();
                cancelSelection.style.display = 'block';
            });

            cancelSelection.addEventListener('click', function() {
                if (canvas) {
                    document.getElementById('pdfViewer').removeChild(canvas);
                    canvas = null;
                }
                cancelSelection.style.display = 'none';
                closePdfModal();
                currentPosition = null;
            });
        });
    </script>  
</body>
</html>
